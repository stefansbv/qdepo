#!/usr/bin/perl
# +---------------------------------------------------------------------------+
# | Name     : tpda-qrt (TPDA - Query Repository Tool)                        |
# | Author   : Stefan Suciu  [ stefansbv 'at' users . sourceforge . net ]     |
# | Website  : http://tpda-qrt.sourceforge.net                                |
# |                                                                           |
# | Copyright (C) 2010  Stefan Suciu                                          |
# |                                                                           |
# | This program is free software; you can redistribute it and/or modify      |
# | it under the terms of the GNU General Public License as published by      |
# | the Free Software Foundation; either version 2 of the License, or         |
# | (at your option) any later version.                                       |
# |                                                                           |
# | This program is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of            |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
# | GNU General Public License for more details.                              |
# |                                                                           |
# | You should have received a copy of the GNU General Public License         |
# | along with this program; if not, write to the Free Software               |
# | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA |
# +---------------------------------------------------------------------------+
# |
use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use Cwd;
use File::Basename;
use File::HomeDir;
use File::Find::Rule;
use File::Spec::Functions;
use File::Path 2.07 qw( make_path remove_tree );
use File::Copy;

# Parse options and print usage if there is a syntax error,
# or if usage was explicitly requested.
my $help    = '';
my $man     = '';
my $verbose = 1;     # default option
my $list;
my $user;
my $pass;
my $init;

# Process options.
if ( @ARGV > 0 ) {
    GetOptions(
        'help|?'    => \$help,
        'man'       => \$man,
        'list:s'    => \$list,
        'user=s'    => \$user,
        'password=s'=> \$pass,
        'verbose+'  => \$verbose,
        'quiet'     => sub { $verbose = 0 },
        'init'      => \$init,
        ),
        or pod2usage(2);
}
if ( $man or $help or $#ARGV >= 0 ) {
    pod2usage(1) if $help;
    pod2usage( VERBOSE => 2 ) if $man;
}

my $cfgname = shift;         # Runtime configuration name or database name

#- Options
my $opts = {};

my $home = File::HomeDir->my_home;

# Build in variables
my $cfg_p = '.tpda-qrt';
my $src_p = 'etc';
my $cfg_n = 'general.yml';

# User configuration path
my $cfg_path = catdir($home, $cfg_p);

if (defined $cfgname) {
    $opts->{cfgname} = $cfgname;
}

# Check 'list' and 'init' option first
if ( defined $list xor defined $init) {
    if ( defined $list ) {
        list_configs();
        exit 0;
    }
    if ( defined $init ) {
        if (defined $cfgname) {
            init_configs($cfgname);
            exit 0;
        }
        else {
            pod2usage(1);
        }
    }
}

#- Other options
$opts->{cfgmain} = 'etc/main.yml';
$opts->{verbose} = $verbose;
$opts->{user}    = $user;
$opts->{pass}    = $pass;

# Check database option last
if ( exists $opts->{cfgname} ) {

    # Go and run the app
    use Qrt;
    my $app = Qrt->new( $opts )->run;

    print "Normal exit.\n";
    exit 0;
}

# If no other option, usage
pod2usage(1);


#-- Subs

#-

sub init_configs {
    my $cfg_name = shift;

    if ( !$cfg_name ) {
        pod2usage(1);
    }

    my $etc_dir = create_path($cfg_name);
    copy_template($etc_dir);
}

sub create_path {
    my $cfg_name = shift;

    my $cfg_dir = catdir( $cfg_path, 'db' );

    my $etc_dir = catdir($cfg_dir, $cfg_name, 'etc');
    my $qdf_dir = catdir($cfg_dir, $cfg_name, 'qdf');

    make_path(
        $etc_dir, $qdf_dir,
        { error => \my $err }
    );
    if (@$err) {
        for my $diag (@$err) {
            my ($file, $message) = %$diag;
            if ($file eq '') {
                print "Error: $message\n";
            }
            else {
                print "$file: $message\n";
            }
        }
    }

    return $etc_dir;
}

sub copy_template {
    my $etc_dir = shift;

    # Copying template file

    my $tmpl_dir = catdir( $cfg_path, 'template' );
    my $tmpl_fqn = catfile( $tmpl_dir, 'connection.yml' );

    my $etc_fqn =  catfile( $etc_dir, 'connection.yml' );
    if (-f $etc_fqn ) {
        print "Connection configuration exists, can't overwrite.\n";
        print ":> $etc_fqn\n";
        return;
    }

    copy_files($tmpl_fqn, $etc_dir);
}

sub copy_files {
    my ($src_fqn, $dst_p) = @_;

    if ( !-f $src_fqn ) {
        print "Source not found:\n $src_fqn\n";
        print "Use script/setup-cfg.pl to initialize the config path!\n";
        return;
    }
    if ( !-d $dst_p ) {
        print "Destination path not found:\n $dst_p\n";
        return;
    }

    # print "$src_fqn > $dst_p\n";
    copy( $src_fqn, $dst_p ) or die $!;
}

#-

sub list_configs {

    my $dir = catdir( $cfg_path, 'db' );

    my $conn_list = find_subdirs($dir);

    foreach my $cfg_name ( @{$conn_list} ) {
        my $tmpl_fqn = catfile( $dir, $cfg_name, 'etc', 'connection.yml' );
        # If connection file exist than list an connection
        if (-f $tmpl_fqn) {
            print " > $cfg_name\n";
        }
    }
}

sub find_subdirs {

    my $dir = shift;

    # Find all the sub directories of a given directory
    my $rule = File::Find::Rule->new
        ->mindepth(1)
        ->maxdepth(1);
    # Ignore git
    $rule->or(
        $rule->new
            ->directory
            ->name('.git')
            ->prune
            ->discard,
        $rule->new);

    my @subdirs = $rule->directory->in( $dir );

    my @dbs = map { basename($_); } @subdirs;

    return \@dbs;
}


__END__

=head1 NAME

tpda-qrt - TPDA - Query Repository Tool

=head1 SYNOPSIS

tpda-qrt -init <connection>

tpda-qrt <connection> [-user <user> [-password <pass>]]

tpda-qrt -list

Options:

 -init <connection>   Initialize (create) configuration path
 -list                 List available configuration names and files
 -user                 User name
 -password             Password
 -help                 Brief help message
 -man                  Full documentation
 -verbose              Increase the verbosity of the output

=head1 DESCRIPTION

TPDA - Query Repository Tool - a wxPerl GUI tool for data exporting
and SQL query repository management. Queries are saved in XML files
and can be edited and parametrized.

=head2 Configuration

A configuration name is the name of the directory underneath the
B<.tpda-qrt/db/ > path.  This directory contains two other directories
B<etc> and B<qdf>. The B<etc> directory contains a file named
B<connection.yml>.  This file has to be updated with the connection
configuration for your database.  The other directory named B<qdf> is
the place where your query definition files are stored.  This files
can be created and updated with the GUI or can be copied from existing
repositories.

Configuration files are in YAML format, the format described in the
documentation of the YAML::Tiny module.

=head2 Quick start

After installing the application, the first step is to run the
B<setup-cfg> script from the B<script> directory to initialize the
user configuration tree in the user's home directory.

Next, run B<tpda-qrt> with the b<-init> option to create the path for
the connection and query definition files.

Last step is to run B<tpda-qrt> with the connection name created at
the previous step as argument, create new B<qdf> files and use them to
export data from the tables in the formats currently supported.

Have fun!

=head1 OPTIONS DETAILS

=over

=item B<-init> <connection>

Initialize (create) configuration paths and created default
configuration files from template.  A connection name is required.

=item B<-list>

List all configuration names.  Usually a configuration name is the
same as the database name, but this is not a requirement.

=item B<-user>

Sets the user name.  If the user is specified but not the password than
the login dialog will ask only for the password.  If both the password
and user are provided then the login dialog will be skipped.

=item B<-password>

Sets the password.  If the user option is not specified than show
usage and exit.  If the user is specified skip the login dialog.

=item B<-man>

Prints the manual page and exits.

=item B<-verbose>

Increase the verbosity of the output. This option is incremental.

=back

=head1 LICENSE

Copyright (C) 2010  Stefan Suciu
This program is free software, you can redistribute it and/or
modify it under the terms of GNU General Public License.

=head1 AUTHOR

Stefan Suciu <stefansbv 'at' users . sourceforge . net>

=cut
