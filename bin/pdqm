#!/usr/bin/perl
# +---------------------------------------------------------------------------+
# | Name     : Pdqm (Perl Database Query Manager)                             |
# | Author   : Stefan Suciu  [ stefansbv 'at' users . sourceforge . net ]     |
# | Website  :                                                                |
# |                                                                           |
# | Copyright (C) 2010  Stefan Suciu                                          |
# |                                                                           |
# | This program is free software; you can redistribute it and/or modify      |
# | it under the terms of the GNU General Public License as published by      |
# | the Free Software Foundation; either version 2 of the License, or         |
# | (at your option) any later version.                                       |
# |                                                                           |
# | This program is distributed in the hope that it will be useful,           |
# | but WITHOUT ANY WARRANTY; without even the implied warranty of            |
# | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             |
# | GNU General Public License for more details.                              |
# |                                                                           |
# | You should have received a copy of the GNU General Public License         |
# | along with this program; if not, write to the Free Software               |
# | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA |
# +---------------------------------------------------------------------------+
# |
# |
#!/usr/bin/perl


use strict;
use warnings;

use Data::Dumper;

use Getopt::Long;
use Pod::Usage;

use File::Basename;
use File::HomeDir;
use File::Find::Rule;
use File::Spec::Functions;

# Parse options and print usage if there is a syntax error,
# or if usage was explicitly requested.
my $help    = '';
my $man     = '';
my $verbose = 1;     # default option
my $cfg_name;
my $db;
my $list;
my $user;
my $pass;

# Process options.
if ( @ARGV > 0 ) {
    GetOptions(
        'help|?'    => \$help,
        'man'       => \$man,
        'verbose+'  => \$verbose,
        'quiet'     => sub { $verbose = 0 },
        'config=s'  => \$cfg_name,
        'user=s'    => \$user,
        'password=s'=> \$pass,
        'db=s'      => \$db,
        'list:s'    => \$list,
        ),
        or pod2usage(2);
}
if ( $man or $help or $#ARGV >= 0 ) {
    pod2usage(1) if $help;
    pod2usage( VERBOSE => 2 ) if $man;
    if ( $#ARGV >= 0 ) {
        pod2usage("$0: too many arguments.");
    }
}

#- Options
my $opts = {};
$opts->{verbose} = $verbose;
$opts->{user} = $user;
$opts->{pass} = $pass;

#- Setup paths

$opts->{home}    = File::HomeDir->my_home;  # User home directory
$opts->{cnf_n}   = '.pdqm';                 # User config directory
# User configuration file path
$opts->{cnf_qn}  = catdir( $opts->{home}, $opts->{cnf_n} );
# Tool bar configs
$opts->{cnf_etc} = catdir( $opts->{cnf_qn}, 'etc' );
$opts->{cnf_toolb} = catfile( $opts->{cnf_etc}, 'interfaces', 'toolbar.yml' );
$opts->{cnf_templ} = catfile( $opts->{cnf_etc}, 'template', 'template.qdf' );

if (defined $db) {
    # Db base config and qdf paths
    $opts->{db_root_qn} = catdir( $opts->{cnf_qn},     'db' );
    $opts->{db_base_qn} = catdir( $opts->{db_root_qn},  $db );
    $opts->{db_cnf_qn}  = catdir( $opts->{db_base_qn}, 'etc' );
    $opts->{db_qdf_qn}  = catdir( $opts->{db_base_qn}, 'qdf' );
    $opts->{db_name}    = $db;
}

# Check list option first
if ( defined $list ) {

    print " - list option\n";
    if ( defined $db ) {
        print " - db option: $db\n";
        list_configs();
    }
    else {
        list_configs();
    }

    exit 0;
}

# Check database option last
if ( exists $opts->{db_name} ) {

    #
    $opts->{cfg_name} = locate_configs( $opts->{db_cnf_qn} );

    # Go and run the app
    use Pdqm;
    my $app = Pdqm->new( $opts )->run;

    print "Normal exit.\n";
    exit 0;
}

# If no other option, usage
pod2usage(1);


#-- Subs

sub list_configs {

    my $dir = $opts->{db_root_qn};

    my $db_list = find_subdirs($dir);

    foreach my $item ( @{$db_list} ) {
        my $db_cnf_qn = catdir( $dir, $item, 'etc' );
        print " db_cnf_qn = $db_cnf_qn\n";
        my $files = locate_configs($db_cnf_qn);
        print Dumper( $files );
    }

}

sub locate_configs {
    my $dir = shift;

    my $cfg_fn = find_config_files($dir);
    # Number of config files found
    my $no_cfg = scalar @{$cfg_fn};
    print " $no_cfg config files found\n";

    if ($no_cfg == 1) {
        $opts->{db_cnf_fqn} = catfile($opts->{db_cnf_qn}, $cfg_fn->[0]);
        return $cfg_fn->[0];
    }
    else {
        # Multiple config files

    }
}

sub find_subdirs {

    my $dir = shift;

    # Find all the subdirectories of a given directory
    my $rule = File::Find::Rule->new
        ->mindepth(1)
        ->maxdepth(1);
    # Ignore git
    $rule->or(
        $rule->new
            ->directory
            ->name('.git')
            ->prune
            ->discard,
        $rule->new);

    my @subdirs = $rule->directory->in( $dir );

    my @dbs = map { basename($_); } @subdirs;

    return \@dbs;
}

sub find_config_files {

    my $dir = shift;

    my @files = File::Find::Rule
        ->mindepth(1)
        ->maxdepth(1)
        ->relative
        ->file->name( '*.yml' )
        ->in( $dir );

    return \@files;
}

__END__

=head1 NAME

Pdqm (Perl Database Query Manager)

=head1 SYNOPSIS

pdqm.pl [-list [<app-id>]]

pdqm.pl -a <app-id> [-user <user> [-pass <pass>]] [-c <config-name>]

Options:

 -list     [app]   List installed apps or detailed config info
 -app      [app]   Run application
 -config           Application configuration name
 -user             User name
 -password         Password
 -help             Brief help message
 -man              Full documentation
 -verbose          Increase the verbosity of the output

=head1 DESCRIPTION

B<Pdqm> A graphical user interface for your SQL queries ...

=head1 OPTIONS DETAILS

=over

=item B<-list> [application Id]

List installed (configured) applications

Example:

 % pdqm.pl -l

will return something like this:

Applications list:
 id: [ classicmodels  ] classicmodels

and if an application Id is provided, list the configuration details
for that application.

 % pdqm.pl -l classicmodels

 Application [id]: classicmodels
  Name           : classicmodels
  Description    : ClassicModels demo application
  Full path      : /home/user/tpda/apps/classicmodels
  Config file(s) :
    classicmodels-pg -> conf\classicmodels-pg.yml
    classicmodels-my -> conf\classicmodels-my.yml
    classicmodels-fb -> conf\classicmodels-fb.yml

Where 'classicmodels-xx' is the configuration name corresponding to
each configuration file located in the conf sub directory of the
applications sub directory.

=item B<-app>

The name (identifier) of the application.  Has to be the same as the
name of the sub directory where the application files are located.

=item B<-config> <config-name>

Set configuration name to use. Any application can have one or more
configuration files with different names in the conf directory. Each
file has a configuration name assigned to it in a main config file. If
the main configuration file is build using the install-apps.pl tool,
then the config name will be set equal to the file name without the
extension.

=item B<-user>

Sets the user name.  If the user is specified but not the password than
the login dialog will ask only for the password.  If both the password
and user are provided then the login dialog will be skipped.

=item B<-password>

Sets the password.  If the user option is not specified than show
usage and exit.  If the user is specified skip the login dialog.

=item B<-man>

Prints the manual page and exits.

=item B<-verbose>

Increase the verbosity of the output. This option is incremental.

=back

=head1 LICENSE

Copyright (C) 2004-2010  Stefan Suciu
This program is free software, you can redistribute it and/or
modify it under the terms of GNU General Public License.

=head1 AUTHOR

Stefan Suciu <stefansbv 'at' users . sourceforge . net>

=cut
